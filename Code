import cv2
import dlib
import pygame
from scipy.spatial import distance
from imutils import face_utils
import time

import dlib
# Load the face detector
detector = dlib.get_frontal_face_detector()

# Load the landmark predictor using raw string literal
predictor = dlib.shape_predictor("location of shape_predictor_68_face_landmarks.dat")

# Initialize eye blink detection parameters
EYE_AR_THRESH = 0.25
EYE_AR_CONSEC_FRAMES = 20
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
COUNTER = 0
ALARM_ON = False

# Initialize eye blink detection parameters
EYE_AR_THRESH = 0.25
EYE_AR_CONSEC_FRAMES = 20
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
COUNTER = 0
ALARM_ON = False

# Initialize yawn detection parameters
MOUTH_AR_THRESH = 0.6
YAWN_COUNTER = 0
YAWN_FLAG = False

from scipy.spatial import distance
from imutils import face_utils
from pygame import mixer
import imutils

mixer.init()
mixer.music.load("music.wav")

def eye_aspect_ratio(eye):
	A = distance.euclidean(eye[1], eye[5])
	B = distance.euclidean(eye[2], eye[4])
	C = distance.euclidean(eye[0], eye[3])
	ear = (A + B) / (2.0 * C)
	return ear

thresh = 0.25
frame_check = 20
detect = dlib.get_frontal_face_detector()
predict = dlib.shape_predictor("models/shape_predictor_68_face_landmarks.dat")

(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
cap=cv2.VideoCapture(0)
flag=0
while True:
	ret, frame=cap.read()
	frame = imutils.resize(frame, width=450)
	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	subjects = detect(gray, 0)
	for subject in subjects:
		shape = predict(gray, subject)
		shape = face_utils.shape_to_np(shape)
		leftEye = shape[lStart:lEnd]
		rightEye = shape[rStart:rEnd]
		leftEAR = eye_aspect_ratio(leftEye)
		rightEAR = eye_aspect_ratio(rightEye)
		ear = (leftEAR + rightEAR) / 2.0
		leftEyeHull = cv2.convexHull(leftEye)
		rightEyeHull = cv2.convexHull(rightEye)
		cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
		cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)
		if ear < thresh:
			flag += 1
			print (flag)
			if flag >= frame_check:
				cv2.putText(frame, "****************ALERT!****************", (10, 30),
					cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
				cv2.putText(frame, "****************ALERT!****************", (10,325),
					cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
				mixer.music.play()
		else:
			flag = 0
	cv2.imshow("Frame", frame)
	key = cv2.waitKey(1) & 0xFF
	if key == ord("q"):
		break
cv2.destroyAllWindows()
cap.release()

# Load the alert sound using pygame
pygame.mixer.init()
alert_sound = pygame.mixer.Sound("location of music.wav")

# Initialize the alert message timer
ALERT_MESSAGE_DURATION = 4  # in seconds
alert_message_start_time = 0

def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear
def mouth_aspect_ratio(mouth):
    A = euclidean_dist(mouth[13], mouth[19])
    B = euclidean_dist(mouth[14], mouth[18])
    C = euclidean_dist(mouth[15], mouth[17])
    mar = (A + B + C) / (3.0 * euclidean_dist(mouth[12], mouth[16]))
    return mar

# Start video stream
cap = cv2.VideoCapture(0)  # Use 0 for the default camera, or replace with a video file path
while True:
    ret, frame = cap.read()
    if not ret:
        break
 # Convert frame to grayscale
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
# Detect faces in the grayscale frame
faces = detector(gray, 0)

for face in faces:
    shape = predictor(gray, face)
    shape = face_utils.shape_to_np(shape)
 # Extract eye landmarks
leftEye = shape[lStart:lEnd]
rightEye = shape[rStart:rEnd]
# Calculate eye aspect ratio (EAR)
leftEAR = eye_aspect_ratio(leftEye)
rightEAR = eye_aspect_ratio(rightEye)
ear = (leftEAR + rightEAR) / 2.0

 # Detect eye blink
        if ear < EYE_AR_THRESH:
            COUNTER += 1

            if COUNTER >= EYE_AR_CONSEC_FRAMES:
                if not ALARM_ON:
                    ALARM_ON = True
                    alert_sound.play()
                    alert_message_start_time = time.time()

                cv2.putText(frame, "You are drowsy!", (10, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        else:
            COUNTER = 0
            ALARM_ON = False

# Extract mouth landmarks (from points 48 to 67)
 mouth = shape[48:68]

# Calculate mouth aspect ratio (MAR)
 mouth_ar = mouth_aspect_ratio(mouth)

 # Detect yawn
        if mouth_ar < MOUTH_AR_THRESH:
            if not YAWN_FLAG:
                YAWN_COUNTER += 1
                YAWN_FLAG = True

                # Play the alert sound and set the alert message timer when a yawn is detected
                alert_sound.play()
                alert_message_start_time = time.time()

        else:
            YAWN_FLAG = False

 # Draw facial landmarks on eyebrows, jaw, and chin
        jaw = shape[0:17]
        right_eyebrow = shape[17:22]
        left_eyebrow = shape[22:27]

        for (x, y) in jaw:
            cv2.circle(frame, (x, y), 2, (0, 0, 255), -1)  # Red color for jaw landmarks
        for (x, y) in right_eyebrow:
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)  # Green color for right eyebrow landmarks
        for (x, y) in left_eyebrow:
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)  # Green color for left eyebrow landmarks

# Draw the eye landmarks as green points
        for (x, y) in leftEye:
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)
        for (x, y) in rightEye:
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)

 # Draw the mouth landmarks as green points
        for (x, y) in mouth:
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)
 # Draw the yawn count on the frame
        cv2.putText(frame, f"Yawns: {YAWN_COUNTER}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
 # Display the alert message for 4 seconds
        if time.time() - alert_message_start_time < ALERT_MESSAGE_DURATION:
            cv2.putText(frame, "Take a break!", (10, 90),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
# Show the frame
    cv2.imshow("Frame", frame)
 # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
# Release video capture and close all windows
cap.release()
cv2.destroyAllWindows()
